//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/ControlsPC.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsPC : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsPC()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsPC"",
    ""maps"": [
        {
            ""name"": ""GameplayControls"",
            ""id"": ""0749e31b-8d86-4655-b4e0-ba9de88d1daa"",
            ""actions"": [
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""ae54b088-d435-4894-b4a0-dfd3498f6ada"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire1"",
                    ""type"": ""Button"",
                    ""id"": ""0320eee0-4f35-4388-b00e-c307004cdddc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire2"",
                    ""type"": ""Button"",
                    ""id"": ""b1ddbb4e-c417-45ee-aead-c5530c5216bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b81edf36-6db1-42bd-8995-bc033aba293e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReplaceWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""4a98aa95-de05-4c31-92c5-e80504f3754f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""902e1a7c-1543-492f-a6e8-4071df978249"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fbaac51-605e-42cd-8305-14a325b6a610"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29dfb38d-9cfa-4ac6-ae03-d0972abb7aa2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6a9bb9b-9dda-431d-871d-60ece573f93c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""865debcb-751b-4a13-b861-61eae7762dc9"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReplaceWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementControls"",
            ""id"": ""22b60974-2446-4cc9-86f7-5103ee6e193a"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b63683dc-6732-4e48-a53c-0453906b5d52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e4797b5-a99d-45b6-b5c9-c3aab222c549"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move1"",
                    ""type"": ""Value"",
                    ""id"": ""33a16dcc-7600-448b-b3cb-506bc412260b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move2"",
                    ""type"": ""Button"",
                    ""id"": ""47c17049-dc43-4b0b-a258-20567b2f4cc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5cd5f7ac-c04d-4de9-a038-0dea66c9136d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68387518-930c-4df8-82aa-7f3976e214b4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94147a6f-e12c-423c-8894-546f5ae3f6ea"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ce61c119-2303-4959-abd6-89c99ad69305"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""92d38aab-0876-41fd-aa46-642f3c59a17b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d6c78024-afd9-4355-acf0-4616ac464660"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a1b30da0-2139-46dd-a4da-ccce34a3d516"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3e1f09a-b7ee-4dd2-a8ba-051b496c6fb9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0588bbc5-9d03-48e6-93c2-751277e76f9b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d71cf60-0d87-480c-92e3-08fdef205a05"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41d7816b-7483-4540-8d16-9d6913cbd8c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9377c96a-94cf-47d7-bec4-cc285d25fa29"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f10c801-eb9a-4a72-8ed9-4caad2f582ea"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseResumeControls"",
            ""id"": ""3a878bfb-818d-4dd6-b396-249520de92ae"",
            ""actions"": [
                {
                    ""name"": ""PauseResume"",
                    ""type"": ""Button"",
                    ""id"": ""da002812-b248-4d70-b810-452dedbf7b20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b3f00a7-5ccd-4af6-b1bc-b3d73539e918"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseResume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractionControls"",
            ""id"": ""bad9bc9b-c568-4cd1-bac2-a0c9c76f97e2"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""99e809ae-623e-4c2a-bb4d-1e870502c441"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8976d46-1e18-4729-bd4b-2640ae156267"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayControls
        m_GameplayControls = asset.FindActionMap("GameplayControls", throwIfNotFound: true);
        m_GameplayControls_SwitchWeapon = m_GameplayControls.FindAction("SwitchWeapon", throwIfNotFound: true);
        m_GameplayControls_Fire1 = m_GameplayControls.FindAction("Fire1", throwIfNotFound: true);
        m_GameplayControls_Fire2 = m_GameplayControls.FindAction("Fire2", throwIfNotFound: true);
        m_GameplayControls_Reload = m_GameplayControls.FindAction("Reload", throwIfNotFound: true);
        m_GameplayControls_ReplaceWeapon = m_GameplayControls.FindAction("ReplaceWeapon", throwIfNotFound: true);
        // MovementControls
        m_MovementControls = asset.FindActionMap("MovementControls", throwIfNotFound: true);
        m_MovementControls_Newaction = m_MovementControls.FindAction("New action", throwIfNotFound: true);
        m_MovementControls_Look = m_MovementControls.FindAction("Look", throwIfNotFound: true);
        m_MovementControls_Move1 = m_MovementControls.FindAction("Move1", throwIfNotFound: true);
        m_MovementControls_Move2 = m_MovementControls.FindAction("Move2", throwIfNotFound: true);
        m_MovementControls_Jump = m_MovementControls.FindAction("Jump", throwIfNotFound: true);
        // PauseResumeControls
        m_PauseResumeControls = asset.FindActionMap("PauseResumeControls", throwIfNotFound: true);
        m_PauseResumeControls_PauseResume = m_PauseResumeControls.FindAction("PauseResume", throwIfNotFound: true);
        // InteractionControls
        m_InteractionControls = asset.FindActionMap("InteractionControls", throwIfNotFound: true);
        m_InteractionControls_Interact = m_InteractionControls.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayControls
    private readonly InputActionMap m_GameplayControls;
    private IGameplayControlsActions m_GameplayControlsActionsCallbackInterface;
    private readonly InputAction m_GameplayControls_SwitchWeapon;
    private readonly InputAction m_GameplayControls_Fire1;
    private readonly InputAction m_GameplayControls_Fire2;
    private readonly InputAction m_GameplayControls_Reload;
    private readonly InputAction m_GameplayControls_ReplaceWeapon;
    public struct GameplayControlsActions
    {
        private @ControlsPC m_Wrapper;
        public GameplayControlsActions(@ControlsPC wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchWeapon => m_Wrapper.m_GameplayControls_SwitchWeapon;
        public InputAction @Fire1 => m_Wrapper.m_GameplayControls_Fire1;
        public InputAction @Fire2 => m_Wrapper.m_GameplayControls_Fire2;
        public InputAction @Reload => m_Wrapper.m_GameplayControls_Reload;
        public InputAction @ReplaceWeapon => m_Wrapper.m_GameplayControls_ReplaceWeapon;
        public InputActionMap Get() { return m_Wrapper.m_GameplayControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayControlsActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayControlsActions instance)
        {
            if (m_Wrapper.m_GameplayControlsActionsCallbackInterface != null)
            {
                @SwitchWeapon.started -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnSwitchWeapon;
                @SwitchWeapon.performed -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnSwitchWeapon;
                @SwitchWeapon.canceled -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnSwitchWeapon;
                @Fire1.started -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnFire1;
                @Fire1.performed -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnFire1;
                @Fire1.canceled -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnFire1;
                @Fire2.started -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnFire2;
                @Fire2.performed -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnFire2;
                @Fire2.canceled -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnFire2;
                @Reload.started -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnReload;
                @ReplaceWeapon.started -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnReplaceWeapon;
                @ReplaceWeapon.performed -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnReplaceWeapon;
                @ReplaceWeapon.canceled -= m_Wrapper.m_GameplayControlsActionsCallbackInterface.OnReplaceWeapon;
            }
            m_Wrapper.m_GameplayControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchWeapon.started += instance.OnSwitchWeapon;
                @SwitchWeapon.performed += instance.OnSwitchWeapon;
                @SwitchWeapon.canceled += instance.OnSwitchWeapon;
                @Fire1.started += instance.OnFire1;
                @Fire1.performed += instance.OnFire1;
                @Fire1.canceled += instance.OnFire1;
                @Fire2.started += instance.OnFire2;
                @Fire2.performed += instance.OnFire2;
                @Fire2.canceled += instance.OnFire2;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @ReplaceWeapon.started += instance.OnReplaceWeapon;
                @ReplaceWeapon.performed += instance.OnReplaceWeapon;
                @ReplaceWeapon.canceled += instance.OnReplaceWeapon;
            }
        }
    }
    public GameplayControlsActions @GameplayControls => new GameplayControlsActions(this);

    // MovementControls
    private readonly InputActionMap m_MovementControls;
    private IMovementControlsActions m_MovementControlsActionsCallbackInterface;
    private readonly InputAction m_MovementControls_Newaction;
    private readonly InputAction m_MovementControls_Look;
    private readonly InputAction m_MovementControls_Move1;
    private readonly InputAction m_MovementControls_Move2;
    private readonly InputAction m_MovementControls_Jump;
    public struct MovementControlsActions
    {
        private @ControlsPC m_Wrapper;
        public MovementControlsActions(@ControlsPC wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MovementControls_Newaction;
        public InputAction @Look => m_Wrapper.m_MovementControls_Look;
        public InputAction @Move1 => m_Wrapper.m_MovementControls_Move1;
        public InputAction @Move2 => m_Wrapper.m_MovementControls_Move2;
        public InputAction @Jump => m_Wrapper.m_MovementControls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_MovementControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMovementControlsActions instance)
        {
            if (m_Wrapper.m_MovementControlsActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnNewaction;
                @Look.started -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnLook;
                @Move1.started -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnMove1;
                @Move1.performed -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnMove1;
                @Move1.canceled -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnMove1;
                @Move2.started -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnMove2;
                @Move2.performed -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnMove2;
                @Move2.canceled -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnMove2;
                @Jump.started -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementControlsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MovementControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move1.started += instance.OnMove1;
                @Move1.performed += instance.OnMove1;
                @Move1.canceled += instance.OnMove1;
                @Move2.started += instance.OnMove2;
                @Move2.performed += instance.OnMove2;
                @Move2.canceled += instance.OnMove2;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MovementControlsActions @MovementControls => new MovementControlsActions(this);

    // PauseResumeControls
    private readonly InputActionMap m_PauseResumeControls;
    private IPauseResumeControlsActions m_PauseResumeControlsActionsCallbackInterface;
    private readonly InputAction m_PauseResumeControls_PauseResume;
    public struct PauseResumeControlsActions
    {
        private @ControlsPC m_Wrapper;
        public PauseResumeControlsActions(@ControlsPC wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseResume => m_Wrapper.m_PauseResumeControls_PauseResume;
        public InputActionMap Get() { return m_Wrapper.m_PauseResumeControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseResumeControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPauseResumeControlsActions instance)
        {
            if (m_Wrapper.m_PauseResumeControlsActionsCallbackInterface != null)
            {
                @PauseResume.started -= m_Wrapper.m_PauseResumeControlsActionsCallbackInterface.OnPauseResume;
                @PauseResume.performed -= m_Wrapper.m_PauseResumeControlsActionsCallbackInterface.OnPauseResume;
                @PauseResume.canceled -= m_Wrapper.m_PauseResumeControlsActionsCallbackInterface.OnPauseResume;
            }
            m_Wrapper.m_PauseResumeControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseResume.started += instance.OnPauseResume;
                @PauseResume.performed += instance.OnPauseResume;
                @PauseResume.canceled += instance.OnPauseResume;
            }
        }
    }
    public PauseResumeControlsActions @PauseResumeControls => new PauseResumeControlsActions(this);

    // InteractionControls
    private readonly InputActionMap m_InteractionControls;
    private IInteractionControlsActions m_InteractionControlsActionsCallbackInterface;
    private readonly InputAction m_InteractionControls_Interact;
    public struct InteractionControlsActions
    {
        private @ControlsPC m_Wrapper;
        public InteractionControlsActions(@ControlsPC wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_InteractionControls_Interact;
        public InputActionMap Get() { return m_Wrapper.m_InteractionControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionControlsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionControlsActions instance)
        {
            if (m_Wrapper.m_InteractionControlsActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_InteractionControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractionControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractionControlsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_InteractionControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public InteractionControlsActions @InteractionControls => new InteractionControlsActions(this);
    public interface IGameplayControlsActions
    {
        void OnSwitchWeapon(InputAction.CallbackContext context);
        void OnFire1(InputAction.CallbackContext context);
        void OnFire2(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnReplaceWeapon(InputAction.CallbackContext context);
    }
    public interface IMovementControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnMove1(InputAction.CallbackContext context);
        void OnMove2(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPauseResumeControlsActions
    {
        void OnPauseResume(InputAction.CallbackContext context);
    }
    public interface IInteractionControlsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
